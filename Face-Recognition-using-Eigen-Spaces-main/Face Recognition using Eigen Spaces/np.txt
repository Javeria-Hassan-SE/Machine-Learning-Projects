import numpy as np
import socket
# from keras.models import Sequential
# from keras.layers import Dense, Conv2D, Flatten
# from keras.datasets import mnist
# from keras.utils import to_categorical
# import matplotlib.pyplot as plt
# from sklearn.model_selection import train_test_split
# (X_train, y_train), (X_test, y_test) = mnist.load_data()
#
# X_train = X_train.reshape(60000,28,28,1)
# X_test = X_test.reshape(10000,28,28,1)
# y_train = to_categorical(y_train)
# y_test = to_categorical(y_test)
#
# model = Sequential()
# model.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(28,28,1)))
# model.add(Conv2D(32, kernel_size=3, activation='sigmoid'))
# model.add(Flatten())
# model.add(Dense(10, activation='softmax'))
# model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
# model.fit(X_train, y_train, validation_data=(X_test[:5000], y_test[:5000]), epochs=1)
# print(X_test.shape)
# x=np.expand_dims(X_test[1],axis=0)
# print(x.shape)
# a=model.predict(x)
# print(a)
# b=model.predict_classes(x)
# print(b)
# c=model.predict_function
# print(c)
#


#This is the server
HOST = '127.0.0.1'
PORT = 65432

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((HOST, PORT))
    s.listen()
    conn, addr = s.accept()
    with conn:
        print('Connected by', addr)
        while True:
            data = conn.recv(40960000)
            if not data:
                break

            myfile = open('work.txt', 'wb')
            myfile.write(data)
            myfile.close()








,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
import socket
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from keras.datasets import mnist
import os
import io
from PIL import Image
import codecs
import base64
from array import array
from keras.utils import to_categorical
(X_train, y_train), (X_test, y_test) = mnist.load_data()
X_test = X_test.reshape(10000,28,28,1)
im=X_test[1]



HOST = '127.0.0.1'
PORT = 65432

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT))
    s.sendall(im)




# #This is the client
